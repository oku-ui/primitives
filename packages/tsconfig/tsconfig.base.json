{
  "compilerOptions": {
    /* Посетите https://aka.ms/tsconfig, чтобы узнать больше об этом файле */

    /* Проекты */
    // "incremental": true,                              /* Сохранять файлы .tsbuildinfo для инкрементной компиляции проектов. */
    // "composite": true,                                /* Включить ограничения, позволяющие использовать проект TypeScript с ссылками на проекты. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов вместо файлов объявлений при ссылке на композитные проекты. */
    // "disableSolutionSearching": true,                 /* Исключить проект из проверки ссылок на многопроектные решения при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Уменьшить количество проектов, загружаемых автоматически TypeScript. */

    /* Язык и среда */
    "target": "ESNext", /* Генерировать поля классов, соответствующие стандарту ECMAScript. */
    "moduleDetection": "force", /* Установить версию языка JavaScript для генерируемого JavaScript и включить соответствующие объявления библиотек. */
    // "lib": [],                                        /* Указать набор встроенных файлов объявлений библиотек, описывающих целевую среду выполнения. */
    // "jsx": "preserve",                                /* Указать, какой код JSX генерируется. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные типов для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать функцию фабрики JSX, используемую при целевом выводе JSX для React, например, 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на фрагмент JSX, используемую для фрагментов при целевом выводе JSX для React, например, 'React.Fragment' или 'Fragment'. */
    // "jsxImportSource": "",                            /* Указать спецификатор модуля, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Это применимо только при целевом выводе JSX для React. */
    // "noLib": true,                                    /* Отключить включение любых файлов библиотек, включая стандартный lib.d.ts. */
    "useDefineForClassFields": true, /* Управлять методом, используемым для определения формата модулей JS файлов. */

    /* Модули */
    "module": "ESNext", /* Указать, какой код модуля генерируется. */
    // "rootDir": "./",                                  /* Указать корневую папку в исходных файлах. */
    "moduleResolution": "Bundler", /* Разрешить импорт с расширениями файлов TypeScript. Требует '--moduleResolution bundler' и либо '--noEmit', либо '--emitDeclarationOnly'. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импорта пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импортов. */
    // "customConditions": [],                           /* Условия, устанавливаемые в дополнение к специфичным для резолвера значениям по умолчанию при разрешении импортов. */
    "resolveJsonModule": true, /* Указать, как TypeScript ищет файл по заданному спецификатору модуля. */
    // "baseUrl": "./",                                  /* Указать базовый каталог для разрешения неотносительных имен модулей. */
    // "paths": {},                                      /* Указать набор записей, которые перенаправляют импорты на дополнительные места поиска. */
    // "rootDirs": [],                                   /* Позволить обрабатывать несколько папок как одну при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, которые действуют как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена пакетов типов, которые будут включены без ссылки в исходном файле. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    "allowImportingTsExtensions": true, /* Включить импорт .json файлов. */
    // "allowArbitraryExtensions": true,                 /* Включить импорт файлов с любым расширением, при наличии файла объявления. */
    // "noResolve": true,                                /* Запретить 'import', 'require' или '<reference>' расширять количество файлов, добавляемых TypeScript в проект. */

    /* Поддержка JavaScript */
    "allowJs": true, /* Обеспечить корректность регистра в импортах. */

    /* Проверка Типов */
    "strict": true, /* Включить сообщения об ошибках, когда параметр функции не используется. */
    // "exactOptionalPropertyTypes": true,               /* Интерпретировать типы необязательных свойств так, как они написаны, а не добавляя 'undefined'. */
    // "noImplicitReturns": true,                        /* Включить сообщения об ошибках для кодовых путей, которые явно не возвращают значение в функции. */
    "noFallthroughCasesInSwitch": true, /* Добавить 'undefined' к типу при доступе с использованием индекса. */
    "noImplicitOverride": true, /* Включить все строгие опции проверки типов. */
    // "noImplicitAny": true,                            /* Включить сообщения об ошибках для выражений и объявлений с неявным типом 'any'. */
    // "strictNullChecks": true,                         /* При проверке типов учитывать 'null' и 'undefined'. */
    // "strictFunctionTypes": true,                      /* При назначении функций проверять, чтобы параметры и возвращаемые значения были совместимы по подтипу. */
    // "strictBindCallApply": true,                      /* Проверять, что аргументы методов 'bind', 'call' и 'apply' соответствуют оригинальной функции. */
    // "strictPropertyInitialization": true,             /* Проверять наличие у классов свойств, объявленных, но не установленных в конструкторе. */
    "noImplicitThis": true, /* Включить сообщения об ошибках для случаев проскока в операторах switch. */
    "noUncheckedIndexedAccess": true, /* Включить сообщения об ошибках, когда 'this' получает тип 'any'. */
    // "useUnknownInCatchVariables": true,               /* По умолчанию использовать для переменных в блоках catch 'unknown' вместо 'any'. */
    // "alwaysStrict": true,                             /* Гарантировать добавление 'use strict' в каждый файл. */
    "noUnusedLocals": true, /* Включить сообщения об ошибках для локальных переменных, которые не используются. */
    "noUnusedParameters": true, /* Указать папку для всех генерируемых файлов. */
    // "removeComments": true,                           /* Отключить вывод комментариев. */
    "noEmit": true, /* Отключить генерацию файлов из компиляции. */
    // "importHelpers": true,                            /* Разрешить импорт функций помощников из tslib один раз на проект, вместо их включения в каждый файл. */
    // "importsNotUsedAsValues": "remove",               /* Указать поведение при генерации/проверке для импортов, используемых только для типов. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но более многословный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Указать корневой путь для отладчиков для поиска исходного кода. */
    // "mapRoot": "",                                    /* Указать местоположение, где отладчик должен искать файлы карт вместо сгенерированных мест. */
    // "inlineSources": true,                            /* Включить исходный код в карты исходников в генерируемом JavaScript. */
    // "emitBOM": true,                                  /* Генерировать метку порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установить символ новой строки для генерации файлов. */
    // "stripInternal": true,                            /* Отключить генерацию объявлений, которые имеют '@internal' в их комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключить генерацию пользовательских вспомогательных функций, таких как '__extends', в скомпилированном выводе. */
    "noEmitOnError": true, /* Разрешить файлы JavaScript быть частью вашей программы. Используйте опцию 'checkJS', чтобы получать ошибки из этих файлов. */
    // "checkJs": true,                                  /* Включить отчет об ошибках в файлах JavaScript с проверкой типов. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папок для проверки файлов JavaScript из 'node_modules'. Применимо только с 'allowJs'. */

    /* Генерация */
    // "declaration": true,                              /* Генерировать файлы .d.ts из файлов TypeScript и JavaScript в вашем проекте. */
    // "declarationMap": true,                           /* Создавать карты исходников для файлов d.ts. */
    // "emitDeclarationOnly": true,                      /* Выводить только файлы d.ts, а не файлы JavaScript. */
    // "sourceMap": true,                                /* Создавать файлы карт исходников для генерируемых файлов JavaScript. */
    // "inlineSourceMap": true,                          /* Включать карты исходников в генерируемый JavaScript. */
    // "outFile": "./",                                  /* Указать файл, который объединяет все выходные данные в один файл JavaScript. Если 'declaration' включено, также указывает файл, который объединяет все выходные данные .d.ts. */
    "outDir": "./dist", /* Не преобразовывать и не удалять никакие импорты или экспорты, не помеченные как только для типов, обеспечивая их запись в формате файла вывода на основе настройки 'module'. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true, /* Генерировать дополнительный JavaScript для упрощения поддержки импорта модулей CommonJS. Это включает 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок на их реальный путь. Это соответствует одноименному флагу в node. */
    "forceConsistentCasingInFileNames": true, /* Отключить создание файлов, если сообщается о каких-либо ошибках проверки типов. */
    // "preserveConstEnums": true,                       /* Отключить стирание объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать каталог вывода для сгенерированных файлов объявлений. */
    // "preserveValueImports": true,                     /* Сохранить неиспользуемые импортированные значения в выходном JavaScript, которые в противном случае были бы удалены. */

    /* Ограничения взаимодействия */
    "isolatedModules": true, /* Гарантировать, что каждый файл может быть безопасно транспилирован без зависимости от других импортов. */
    "verbatimModuleSyntax": true, /* Гарантировать, что переопределяемые члены в производных классах помечены модификатором override. */
    // "noPropertyAccessFromIndexSignature": true,       /* Требовать использование индексированного доступа для ключей, объявленных с использованием индексированного типа. */
    // "allowUnusedLabels": true,                        /* Отключить сообщения об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,                     /* Отключить сообщения об ошибках для недостижимого кода. */
    /* Полнота */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типов .d.ts файлов, включенных в TypeScript. */
    "skipLibCheck": true /* Пропустить проверку типов всех .d.ts файлов. */
  }
}
